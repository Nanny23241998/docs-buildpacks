---
title: Go Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='pushing_apps'></a> Pushing Apps ##

The Go buildpack will be automatically detected if your app has been packaged
with [godep](https://github.com/tools/godep) using `godep save`. It will also be
automatically detected if your app has a `vendor/` directory and your app has
any files ending with `.go`.

If your Cloud Foundry deployment does not have the Go Buildpack installed, or the installed version is out of date, you can use the latest version with the command:

```bash
cf push my_app -b https://github.com/cloudfoundry/go-buildpack.git
```

When specifying versions, we recommend only specifying major/minor versions, eg. go1.6, rather than go1.6.0. This will ensure you receive the most recent patches.

### <a id='start_command'></a>Start command ###

When pushing go apps, you can specify a start command for the app. The start command can be placed in the file `Procfile` in your app's root directory. For example, if the binary generated by your go project is `my-go-server`, your `Procfile` could be:

```
web: my-go-server
```

You can also specify your app's start command in the `manifest.yml` file in the root directory, for example:

```yaml
---
applications:
  - name: my-app-name
    command: my-go-server
```

If you do not specify a start command via a `Procfile`, in the manifest, or via the `-c` flag for `cf push`, the generated binary will be used as the start command. (ex. `my-go-server`)

### <a id='with_godep'></a>Pushing Apps with godep ###
If you are using [godep](https://github.com/tools/godep) to package your dependencies, make sure that you have created a valid `Godeps/Godeps.json` file in the root directory of your app by running `godep save`.

When using godep, you can fix your Go version in  `GoVersion` key of the `Godeps/Godeps.json` file.

#### <a id='godeps_1.6'></a>Go 1.6 ####
* [go 1.6 sample app](https://github.com/cloudfoundry/go-buildpack/tree/master/fixtures/go16/src/go_app)

**NOTE**: if you are using godep with Go 1.6, you must set the `GO15VENDOREXPERIMENT` environment variable to 0, otherwise your app will not stage.

An example `Godeps/Godeps.json`:

```json
{
	"ImportPath": "go_app",
	"GoVersion": "go1.6",
	"Deps": []
}
```

An example `manifest.yml`:

```yaml
---
applications:
  - name: my-app-name
    env:
      GO15VENDOREXPERIMENT: 0
```

### <a id='pushing_Apps_with_native_Go_vendoring'></a>Pushing Apps with native Go vendoring ###
If you are using the native Go vendoring system, which packages all local dependencies in the `vendor/` directory, you must specify your app's package name in the `GOPACKAGENAME` environment variable. An example `manifest.yml`:

If you are using the `vendor/` directory for dependencies, you can set the Go version with the `GOVERSION` environment variable.

#### <a id='go_1.6'></a>Go 1.6 ####
* [sample app](https://github.com/cloudfoundry/go-buildpack/tree/master/fixtures/native_vendoring).

An example `manifest.yml`:

```yaml
---
applications:
 - name: my-app-name
   command: example-project
   env:
     GOVERSION: go1.6
     GOPACKAGENAME: github.com/example-org/example-project
```


## <a id='passing_symbol_linker'></a>Passing a symbol and string to the linker ##

This buildpack supports the go [linker's][https://golang.org/cmd/ld/] ability (`-X symbol
value`) to set the value of a string at link time. This can be done by setting
`GO_LINKER_SYMBOL` and `GO_LINKER_VALUE` in the application's config before
pushing code.

This can be used to embed the commit sha, or other build specific data directly
into the compiled executable.

For an example usage, see the relevant [fixture app](https://github.com/cloudfoundry/go-buildpack/tree/master/fixtures/go16_ldflags/src/go_app).

## <a id='c_dependencies'></a>C dependencies ##

This buildpack supports building with C dependencies via
[cgo](https://golang.org/cmd/cgo/). You can set config vars to specify CGO flags
to, e.g., specify paths for vendored dependencies. E.g., to build
[gopgsqldriver](https://github.com/jbarham/gopgsqldriver), add the config var
`CGO_CFLAGS` with the value `-I/app/code/vendor/include/postgresql` and include
the relevant Postgres header files in `vendor/include/postgresql/` in your app.

## <a id='disconnected'></a> Disconnected environments ##
To use this buildpack on Cloud Foundry, where the Cloud Foundry instance limits some or all internet activity, please read the [Disconnected Environments documentation](https://github.com/cf-buildpacks/buildpack-packager/blob/master/doc/disconnected_environments.md).

## <a id='proxy_support'></a> Proxy Support ##

If you need to use a proxy to download dependencies during staging, you can set
the `http_proxy` and/or `https_proxy` environment variables. For more information, see
the [Proxy Usage Docs](http://docs.cloudfoundry.org/buildpacks/proxy-usage.html).

## <a id='help_support'></a>Help and Support ##

Join the #buildpacks channel in our [Slack community] (http://slack.cloudfoundry.org/) if you need any further assistance.

For more information about using and extending the Go buildpack in Cloud Foundry, see
the [go-buildpack GitHub repo](https://github.com/cloudfoundry/go-buildpack).

You can find current information about this buildpack on the Go buildpack
[release page](https://github.com/cloudfoundry/go-buildpack/releases) in GitHub.
